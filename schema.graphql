schema {
  query: RootQuery
}
type Block {
  _key: String
  _type: String
  children: [Span]
  style: String
  list: String
}
union BlockOrImage = Block | Image
input BooleanFilter {
  """
  Checks if the value is equal to the given input.
  """
  eq: Boolean
  """
  Checks if the value is not equal to the given input.
  """
  neq: Boolean
}
"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date
input DateFilter {
  """
  Checks if the value is equal to the given input.
  """
  eq: Date
  """
  Checks if the value is not equal to the given input.
  """
  neq: Date
  """
  Checks if the value is greater than the given input.
  """
  gt: Date
  """
  Checks if the value is greater than or equal to the given input.
  """
  gte: Date
  """
  Checks if the value is lesser than the given input.
  """
  lt: Date
  """
  Checks if the value is lesser than or equal to the given input.
  """
  lte: Date
}
"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime
input DatetimeFilter {
  """
  Checks if the value is equal to the given input.
  """
  eq: DateTime
  """
  Checks if the value is not equal to the given input.
  """
  neq: DateTime
  """
  Checks if the value is greater than the given input.
  """
  gt: DateTime
  """
  Checks if the value is greater than or equal to the given input.
  """
  gte: DateTime
  """
  Checks if the value is lesser than the given input.
  """
  lt: DateTime
  """
  Checks if the value is lesser than or equal to the given input.
  """
  lte: DateTime
}
"""
A Sanity document
"""
interface Document {
  """
  Document ID
  """
  _id: ID
  """
  Document type
  """
  _type: String
  """
  Date the document was created
  """
  _createdAt: DateTime
  """
  Date the document was last modified
  """
  _updatedAt: DateTime
  """
  Current document revision
  """
  _rev: String
}
input DocumentFilter {
  """
  Apply filters on document level
  """
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
}
input DocumentSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
}
type File {
  _key: String
  _type: String
  asset: SanityFileAsset
}
input FileFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityFileAssetFilter
}
input FileSorting {
  _key: SortOrder
  _type: SortOrder
}
input FloatFilter {
  """
  Checks if the value is equal to the given input.
  """
  eq: Float
  """
  Checks if the value is not equal to the given input.
  """
  neq: Float
  """
  Checks if the value is greater than the given input.
  """
  gt: Float
  """
  Checks if the value is greater than or equal to the given input.
  """
  gte: Float
  """
  Checks if the value is lesser than the given input.
  """
  lt: Float
  """
  Checks if the value is lesser than or equal to the given input.
  """
  lte: Float
}
type Geopoint {
  _key: String
  _type: String
  lat: Float
  lng: Float
  alt: Float
}
input GeopointFilter {
  _key: StringFilter
  _type: StringFilter
  lat: FloatFilter
  lng: FloatFilter
  alt: FloatFilter
}
input GeopointSorting {
  _key: SortOrder
  _type: SortOrder
  lat: SortOrder
  lng: SortOrder
  alt: SortOrder
}
type GitaChapter implements Document {
  """
  Document ID
  """
  _id: ID
  """
  Document type
  """
  _type: String
  """
  Date the document was created
  """
  _createdAt: DateTime
  """
  Date the document was last modified
  """
  _updatedAt: DateTime
  """
  Current document revision
  """
  _rev: String
  _key: String
  title: String
  slug: Slug
  name: String
  name_transliterated: String
  name_translation: String
  verses_count: Float
  chapter_number: Float
  externalId: Float
  name_meaning: String
  image_name: String
  chapter_summary: String
  verses: [GitaVerse]
}
input GitaChapterFilter {
  """
  Apply filters on document level
  """
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
  slug: SlugFilter
  name: StringFilter
  name_transliterated: StringFilter
  name_translation: StringFilter
  verses_count: FloatFilter
  chapter_number: FloatFilter
  externalId: FloatFilter
  name_meaning: StringFilter
  image_name: StringFilter
  chapter_summary: StringFilter
}
input GitaChapterSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
  slug: SlugSorting
  name: SortOrder
  name_transliterated: SortOrder
  name_translation: SortOrder
  verses_count: SortOrder
  chapter_number: SortOrder
  externalId: SortOrder
  name_meaning: SortOrder
  image_name: SortOrder
  chapter_summary: SortOrder
}
type GitaVerse implements Document {
  """
  Document ID
  """
  _id: ID
  """
  Document type
  """
  _type: String
  """
  Date the document was created
  """
  _createdAt: DateTime
  """
  Date the document was last modified
  """
  _updatedAt: DateTime
  """
  Current document revision
  """
  _rev: String
  _key: String
  title: String
  slug: Slug
  chapter: GitaChapter
  chapter_number: Float
  verse_order: Float
  verse_number: Float
  overviewRaw: JSON
  text: String
  transliteration: String
  word_meanings: String
  externalId: Float
  meaning: String
}
input GitaVerseFilter {
  """
  Apply filters on document level
  """
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  title: StringFilter
  slug: SlugFilter
  chapter: GitaChapterFilter
  chapter_number: FloatFilter
  verse_order: FloatFilter
  verse_number: FloatFilter
  text: StringFilter
  transliteration: StringFilter
  word_meanings: StringFilter
  externalId: FloatFilter
  meaning: StringFilter
}
input GitaVerseSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  title: SortOrder
  slug: SlugSorting
  chapter_number: SortOrder
  verse_order: SortOrder
  verse_number: SortOrder
  text: SortOrder
  transliteration: SortOrder
  word_meanings: SortOrder
  externalId: SortOrder
  meaning: SortOrder
}
input IDFilter {
  """
  Checks if the value is equal to the given input.
  """
  eq: ID
  """
  Checks if the value is not equal to the given input.
  """
  neq: ID
  """
  Checks if the value matches the given word/words.
  """
  matches: ID
  in: [ID!]
  nin: [ID!]
}
type Image {
  _key: String
  _type: String
  asset: SanityImageAsset
  hotspot: SanityImageHotspot
  crop: SanityImageCrop
}
input ImageFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityImageAssetFilter
  hotspot: SanityImageHotspotFilter
  crop: SanityImageCropFilter
}
input ImageSorting {
  _key: SortOrder
  _type: SortOrder
  hotspot: SanityImageHotspotSorting
  crop: SanityImageCropSorting
}
input IntFilter {
  """
  Checks if the value is equal to the given input.
  """
  eq: Int
  """
  Checks if the value is not equal to the given input.
  """
  neq: Int
  """
  Checks if the value is greater than the given input.
  """
  gt: Int
  """
  Checks if the value is greater than or equal to the given input.
  """
  gte: Int
  """
  Checks if the value is lesser than the given input.
  """
  lt: Int
  """
  Checks if the value is lesser than or equal to the given input.
  """
  lte: Int
}
"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
type RootQuery {
  GitaChapter(
    """
    GitaChapter document ID
    """
    id: ID!
  ): GitaChapter
  GitaVerse(
    """
    GitaVerse document ID
    """
    id: ID!
  ): GitaVerse
  SanityImageAsset(
    """
    SanityImageAsset document ID
    """
    id: ID!
  ): SanityImageAsset
  SanityFileAsset(
    """
    SanityFileAsset document ID
    """
    id: ID!
  ): SanityFileAsset
  Document(
    """
    Document document ID
    """
    id: ID!
  ): Document
  allGitaChapter(
    where: GitaChapterFilter
    sort: [GitaChapterSorting!]
    """
    Max documents to return
    """
    limit: Int
    """
    Offset at which to start returning documents from
    """
    offset: Int
  ): [GitaChapter!]!
  allGitaVerse(
    where: GitaVerseFilter
    sort: [GitaVerseSorting!]
    """
    Max documents to return
    """
    limit: Int
    """
    Offset at which to start returning documents from
    """
    offset: Int
  ): [GitaVerse!]!
  allSanityImageAsset(
    where: SanityImageAssetFilter
    sort: [SanityImageAssetSorting!]
    """
    Max documents to return
    """
    limit: Int
    """
    Offset at which to start returning documents from
    """
    offset: Int
  ): [SanityImageAsset!]!
  allSanityFileAsset(
    where: SanityFileAssetFilter
    sort: [SanityFileAssetSorting!]
    """
    Max documents to return
    """
    limit: Int
    """
    Offset at which to start returning documents from
    """
    offset: Int
  ): [SanityFileAsset!]!
  allDocument(
    where: DocumentFilter
    sort: [DocumentSorting!]
    """
    Max documents to return
    """
    limit: Int
    """
    Offset at which to start returning documents from
    """
    offset: Int
  ): [Document!]!
}
type SanityAssetSourceData {
  _key: String
  _type: String
  """
  A canonical name for the source this asset is originating from
  """
  name: String
  """
  The unique ID for the asset within the originating source so you can programatically find back to it
  """
  id: String
  """
  A URL to find more information about this asset in the originating source
  """
  url: String
}
input SanityAssetSourceDataFilter {
  _key: StringFilter
  _type: StringFilter
  name: StringFilter
  id: StringFilter
  url: StringFilter
}
input SanityAssetSourceDataSorting {
  _key: SortOrder
  _type: SortOrder
  name: SortOrder
  id: SortOrder
  url: SortOrder
}
type SanityFileAsset implements Document {
  """
  Document ID
  """
  _id: ID
  """
  Document type
  """
  _type: String
  """
  Date the document was created
  """
  _createdAt: DateTime
  """
  Date the document was last modified
  """
  _updatedAt: DateTime
  """
  Current document revision
  """
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  source: SanityAssetSourceData
}
input SanityFileAssetFilter {
  """
  Apply filters on document level
  """
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  originalFilename: StringFilter
  label: StringFilter
  title: StringFilter
  description: StringFilter
  altText: StringFilter
  sha1hash: StringFilter
  extension: StringFilter
  mimeType: StringFilter
  size: FloatFilter
  assetId: StringFilter
  path: StringFilter
  url: StringFilter
  source: SanityAssetSourceDataFilter
}
input SanityFileAssetSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  originalFilename: SortOrder
  label: SortOrder
  title: SortOrder
  description: SortOrder
  altText: SortOrder
  sha1hash: SortOrder
  extension: SortOrder
  mimeType: SortOrder
  size: SortOrder
  assetId: SortOrder
  path: SortOrder
  url: SortOrder
  source: SanityAssetSourceDataSorting
}
type SanityImageAsset implements Document {
  """
  Document ID
  """
  _id: ID
  """
  Document type
  """
  _type: String
  """
  Date the document was created
  """
  _createdAt: DateTime
  """
  Date the document was last modified
  """
  _updatedAt: DateTime
  """
  Current document revision
  """
  _rev: String
  _key: String
  originalFilename: String
  label: String
  title: String
  description: String
  altText: String
  sha1hash: String
  extension: String
  mimeType: String
  size: Float
  assetId: String
  path: String
  url: String
  metadata: SanityImageMetadata
  source: SanityAssetSourceData
}
input SanityImageAssetFilter {
  """
  Apply filters on document level
  """
  _: Sanity_DocumentFilter
  _id: IDFilter
  _type: StringFilter
  _createdAt: DatetimeFilter
  _updatedAt: DatetimeFilter
  _rev: StringFilter
  _key: StringFilter
  originalFilename: StringFilter
  label: StringFilter
  title: StringFilter
  description: StringFilter
  altText: StringFilter
  sha1hash: StringFilter
  extension: StringFilter
  mimeType: StringFilter
  size: FloatFilter
  assetId: StringFilter
  path: StringFilter
  url: StringFilter
  metadata: SanityImageMetadataFilter
  source: SanityAssetSourceDataFilter
}
input SanityImageAssetSorting {
  _id: SortOrder
  _type: SortOrder
  _createdAt: SortOrder
  _updatedAt: SortOrder
  _rev: SortOrder
  _key: SortOrder
  originalFilename: SortOrder
  label: SortOrder
  title: SortOrder
  description: SortOrder
  altText: SortOrder
  sha1hash: SortOrder
  extension: SortOrder
  mimeType: SortOrder
  size: SortOrder
  assetId: SortOrder
  path: SortOrder
  url: SortOrder
  metadata: SanityImageMetadataSorting
  source: SanityAssetSourceDataSorting
}
type SanityImageCrop {
  _key: String
  _type: String
  top: Float
  bottom: Float
  left: Float
  right: Float
}
input SanityImageCropFilter {
  _key: StringFilter
  _type: StringFilter
  top: FloatFilter
  bottom: FloatFilter
  left: FloatFilter
  right: FloatFilter
}
input SanityImageCropSorting {
  _key: SortOrder
  _type: SortOrder
  top: SortOrder
  bottom: SortOrder
  left: SortOrder
  right: SortOrder
}
type SanityImageDimensions {
  _key: String
  _type: String
  height: Float
  width: Float
  aspectRatio: Float
}
input SanityImageDimensionsFilter {
  _key: StringFilter
  _type: StringFilter
  height: FloatFilter
  width: FloatFilter
  aspectRatio: FloatFilter
}
input SanityImageDimensionsSorting {
  _key: SortOrder
  _type: SortOrder
  height: SortOrder
  width: SortOrder
  aspectRatio: SortOrder
}
type SanityImageHotspot {
  _key: String
  _type: String
  x: Float
  y: Float
  height: Float
  width: Float
}
input SanityImageHotspotFilter {
  _key: StringFilter
  _type: StringFilter
  x: FloatFilter
  y: FloatFilter
  height: FloatFilter
  width: FloatFilter
}
input SanityImageHotspotSorting {
  _key: SortOrder
  _type: SortOrder
  x: SortOrder
  y: SortOrder
  height: SortOrder
  width: SortOrder
}
type SanityImageMetadata {
  _key: String
  _type: String
  location: Geopoint
  dimensions: SanityImageDimensions
  palette: SanityImagePalette
  lqip: String
  hasAlpha: Boolean
  isOpaque: Boolean
}
input SanityImageMetadataFilter {
  _key: StringFilter
  _type: StringFilter
  location: GeopointFilter
  dimensions: SanityImageDimensionsFilter
  palette: SanityImagePaletteFilter
  lqip: StringFilter
  hasAlpha: BooleanFilter
  isOpaque: BooleanFilter
}
input SanityImageMetadataSorting {
  _key: SortOrder
  _type: SortOrder
  location: GeopointSorting
  dimensions: SanityImageDimensionsSorting
  palette: SanityImagePaletteSorting
  lqip: SortOrder
  hasAlpha: SortOrder
  isOpaque: SortOrder
}
type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
}
input SanityImagePaletteFilter {
  _key: StringFilter
  _type: StringFilter
  darkMuted: SanityImagePaletteSwatchFilter
  lightVibrant: SanityImagePaletteSwatchFilter
  darkVibrant: SanityImagePaletteSwatchFilter
  vibrant: SanityImagePaletteSwatchFilter
  dominant: SanityImagePaletteSwatchFilter
  lightMuted: SanityImagePaletteSwatchFilter
  muted: SanityImagePaletteSwatchFilter
}
input SanityImagePaletteSorting {
  _key: SortOrder
  _type: SortOrder
  darkMuted: SanityImagePaletteSwatchSorting
  lightVibrant: SanityImagePaletteSwatchSorting
  darkVibrant: SanityImagePaletteSwatchSorting
  vibrant: SanityImagePaletteSwatchSorting
  dominant: SanityImagePaletteSwatchSorting
  lightMuted: SanityImagePaletteSwatchSorting
  muted: SanityImagePaletteSwatchSorting
}
type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}
input SanityImagePaletteSwatchFilter {
  _key: StringFilter
  _type: StringFilter
  background: StringFilter
  foreground: StringFilter
  population: FloatFilter
  title: StringFilter
}
input SanityImagePaletteSwatchSorting {
  _key: SortOrder
  _type: SortOrder
  background: SortOrder
  foreground: SortOrder
  population: SortOrder
  title: SortOrder
}
input Sanity_DocumentFilter {
  """
  All documents referencing the given document ID.
  """
  references: ID
  """
  All documents that are drafts.
  """
  is_draft: Boolean
}
type Slug {
  _key: String
  _type: String
  current: String
}
input SlugFilter {
  _key: StringFilter
  _type: StringFilter
  current: StringFilter
}
input SlugSorting {
  _key: SortOrder
  _type: SortOrder
  current: SortOrder
}
enum SortOrder {
  """
  Sorts on the value in ascending order.
  """
  ASC
  """
  Sorts on the value in descending order.
  """
  DESC
}
type Span {
  _key: String
  _type: String
  marks: [String]
  text: String
}
input StringFilter {
  """
  Checks if the value is equal to the given input.
  """
  eq: String
  """
  Checks if the value is not equal to the given input.
  """
  neq: String
  """
  Checks if the value matches the given word/words.
  """
  matches: String
  in: [String!]
  nin: [String!]
}
"Field is a \"raw\" JSON alias for a different field"
directive @jsonAlias(
  """
  Source field name
  """
  for: String!
) on FIELD_DEFINITION
"Field references one or more documents"
directive @reference on FIELD_DEFINITION
