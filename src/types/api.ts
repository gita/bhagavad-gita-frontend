// NOTE: This file is generated by running `yarn generate:types`.
// DO NOT add types to this file manually.
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: any;
  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  DateTime: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any;
};

export type BooleanFilter = {
  /** Checks if the value is equal to the given input. */
  readonly eq?: Maybe<Scalars['Boolean']>;
  /** Checks if the value is not equal to the given input. */
  readonly neq?: Maybe<Scalars['Boolean']>;
};

export type DateFilter = {
  /** Checks if the value is equal to the given input. */
  readonly eq?: Maybe<Scalars['Date']>;
  /** Checks if the value is not equal to the given input. */
  readonly neq?: Maybe<Scalars['Date']>;
  /** Checks if the value is greater than the given input. */
  readonly gt?: Maybe<Scalars['Date']>;
  /** Checks if the value is greater than or equal to the given input. */
  readonly gte?: Maybe<Scalars['Date']>;
  /** Checks if the value is lesser than the given input. */
  readonly lt?: Maybe<Scalars['Date']>;
  /** Checks if the value is lesser than or equal to the given input. */
  readonly lte?: Maybe<Scalars['Date']>;
};

export type DatetimeFilter = {
  /** Checks if the value is equal to the given input. */
  readonly eq?: Maybe<Scalars['DateTime']>;
  /** Checks if the value is not equal to the given input. */
  readonly neq?: Maybe<Scalars['DateTime']>;
  /** Checks if the value is greater than the given input. */
  readonly gt?: Maybe<Scalars['DateTime']>;
  /** Checks if the value is greater than or equal to the given input. */
  readonly gte?: Maybe<Scalars['DateTime']>;
  /** Checks if the value is lesser than the given input. */
  readonly lt?: Maybe<Scalars['DateTime']>;
  /** Checks if the value is lesser than or equal to the given input. */
  readonly lte?: Maybe<Scalars['DateTime']>;
};

export type DocumentFilter = {
  /** Apply filters on document level */
  readonly _?: Maybe<Sanity_DocumentFilter>;
  readonly _id?: Maybe<IdFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly _createdAt?: Maybe<DatetimeFilter>;
  readonly _updatedAt?: Maybe<DatetimeFilter>;
  readonly _rev?: Maybe<StringFilter>;
};

export type DocumentSorting = {
  readonly _id?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly _createdAt?: Maybe<SortOrder>;
  readonly _updatedAt?: Maybe<SortOrder>;
  readonly _rev?: Maybe<SortOrder>;
};

export type FileFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly asset?: Maybe<SanityFileAssetFilter>;
};

export type FileSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
};

export type FloatFilter = {
  /** Checks if the value is equal to the given input. */
  readonly eq?: Maybe<Scalars['Float']>;
  /** Checks if the value is not equal to the given input. */
  readonly neq?: Maybe<Scalars['Float']>;
  /** Checks if the value is greater than the given input. */
  readonly gt?: Maybe<Scalars['Float']>;
  /** Checks if the value is greater than or equal to the given input. */
  readonly gte?: Maybe<Scalars['Float']>;
  /** Checks if the value is lesser than the given input. */
  readonly lt?: Maybe<Scalars['Float']>;
  /** Checks if the value is lesser than or equal to the given input. */
  readonly lte?: Maybe<Scalars['Float']>;
};

export type GeopointFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly lat?: Maybe<FloatFilter>;
  readonly lng?: Maybe<FloatFilter>;
  readonly alt?: Maybe<FloatFilter>;
};

export type GeopointSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly lat?: Maybe<SortOrder>;
  readonly lng?: Maybe<SortOrder>;
  readonly alt?: Maybe<SortOrder>;
};

export type GitaChapterFilter = {
  /** Apply filters on document level */
  readonly _?: Maybe<Sanity_DocumentFilter>;
  readonly _id?: Maybe<IdFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly _createdAt?: Maybe<DatetimeFilter>;
  readonly _updatedAt?: Maybe<DatetimeFilter>;
  readonly _rev?: Maybe<StringFilter>;
  readonly _key?: Maybe<StringFilter>;
  readonly title?: Maybe<StringFilter>;
  readonly slug?: Maybe<SlugFilter>;
  readonly name?: Maybe<StringFilter>;
  readonly name_transliterated?: Maybe<StringFilter>;
  readonly name_translation?: Maybe<StringFilter>;
  readonly verses_count?: Maybe<FloatFilter>;
  readonly chapter_number?: Maybe<FloatFilter>;
  readonly externalId?: Maybe<FloatFilter>;
  readonly name_meaning?: Maybe<StringFilter>;
  readonly image_name?: Maybe<StringFilter>;
  readonly chapter_summary?: Maybe<StringFilter>;
};

export type GitaChapterSorting = {
  readonly _id?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly _createdAt?: Maybe<SortOrder>;
  readonly _updatedAt?: Maybe<SortOrder>;
  readonly _rev?: Maybe<SortOrder>;
  readonly _key?: Maybe<SortOrder>;
  readonly title?: Maybe<SortOrder>;
  readonly slug?: Maybe<SlugSorting>;
  readonly name?: Maybe<SortOrder>;
  readonly name_transliterated?: Maybe<SortOrder>;
  readonly name_translation?: Maybe<SortOrder>;
  readonly verses_count?: Maybe<SortOrder>;
  readonly chapter_number?: Maybe<SortOrder>;
  readonly externalId?: Maybe<SortOrder>;
  readonly name_meaning?: Maybe<SortOrder>;
  readonly image_name?: Maybe<SortOrder>;
  readonly chapter_summary?: Maybe<SortOrder>;
};

export type GitaVerseFilter = {
  /** Apply filters on document level */
  readonly _?: Maybe<Sanity_DocumentFilter>;
  readonly _id?: Maybe<IdFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly _createdAt?: Maybe<DatetimeFilter>;
  readonly _updatedAt?: Maybe<DatetimeFilter>;
  readonly _rev?: Maybe<StringFilter>;
  readonly _key?: Maybe<StringFilter>;
  readonly title?: Maybe<StringFilter>;
  readonly slug?: Maybe<SlugFilter>;
  readonly chapter?: Maybe<GitaChapterFilter>;
  readonly chapter_number?: Maybe<FloatFilter>;
  readonly verse_order?: Maybe<FloatFilter>;
  readonly verse_number?: Maybe<FloatFilter>;
  readonly text?: Maybe<StringFilter>;
  readonly transliteration?: Maybe<StringFilter>;
  readonly word_meanings?: Maybe<StringFilter>;
  readonly externalId?: Maybe<FloatFilter>;
  readonly meaning?: Maybe<StringFilter>;
};

export type GitaVerseSorting = {
  readonly _id?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly _createdAt?: Maybe<SortOrder>;
  readonly _updatedAt?: Maybe<SortOrder>;
  readonly _rev?: Maybe<SortOrder>;
  readonly _key?: Maybe<SortOrder>;
  readonly title?: Maybe<SortOrder>;
  readonly slug?: Maybe<SlugSorting>;
  readonly chapter_number?: Maybe<SortOrder>;
  readonly verse_order?: Maybe<SortOrder>;
  readonly verse_number?: Maybe<SortOrder>;
  readonly text?: Maybe<SortOrder>;
  readonly transliteration?: Maybe<SortOrder>;
  readonly word_meanings?: Maybe<SortOrder>;
  readonly externalId?: Maybe<SortOrder>;
  readonly meaning?: Maybe<SortOrder>;
};

export type IdFilter = {
  /** Checks if the value is equal to the given input. */
  readonly eq?: Maybe<Scalars['ID']>;
  /** Checks if the value is not equal to the given input. */
  readonly neq?: Maybe<Scalars['ID']>;
  /** Checks if the value matches the given word/words. */
  readonly matches?: Maybe<Scalars['ID']>;
  readonly in?: Maybe<ReadonlyArray<Scalars['ID']>>;
  readonly nin?: Maybe<ReadonlyArray<Scalars['ID']>>;
};

export type ImageFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly asset?: Maybe<SanityImageAssetFilter>;
  readonly hotspot?: Maybe<SanityImageHotspotFilter>;
  readonly crop?: Maybe<SanityImageCropFilter>;
};

export type ImageSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly hotspot?: Maybe<SanityImageHotspotSorting>;
  readonly crop?: Maybe<SanityImageCropSorting>;
};

export type IntFilter = {
  /** Checks if the value is equal to the given input. */
  readonly eq?: Maybe<Scalars['Int']>;
  /** Checks if the value is not equal to the given input. */
  readonly neq?: Maybe<Scalars['Int']>;
  /** Checks if the value is greater than the given input. */
  readonly gt?: Maybe<Scalars['Int']>;
  /** Checks if the value is greater than or equal to the given input. */
  readonly gte?: Maybe<Scalars['Int']>;
  /** Checks if the value is lesser than the given input. */
  readonly lt?: Maybe<Scalars['Int']>;
  /** Checks if the value is lesser than or equal to the given input. */
  readonly lte?: Maybe<Scalars['Int']>;
};

export type SanityAssetSourceDataFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly name?: Maybe<StringFilter>;
  readonly id?: Maybe<StringFilter>;
  readonly url?: Maybe<StringFilter>;
};

export type SanityAssetSourceDataSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly name?: Maybe<SortOrder>;
  readonly id?: Maybe<SortOrder>;
  readonly url?: Maybe<SortOrder>;
};

export type SanityFileAssetFilter = {
  /** Apply filters on document level */
  readonly _?: Maybe<Sanity_DocumentFilter>;
  readonly _id?: Maybe<IdFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly _createdAt?: Maybe<DatetimeFilter>;
  readonly _updatedAt?: Maybe<DatetimeFilter>;
  readonly _rev?: Maybe<StringFilter>;
  readonly _key?: Maybe<StringFilter>;
  readonly originalFilename?: Maybe<StringFilter>;
  readonly label?: Maybe<StringFilter>;
  readonly title?: Maybe<StringFilter>;
  readonly description?: Maybe<StringFilter>;
  readonly altText?: Maybe<StringFilter>;
  readonly sha1hash?: Maybe<StringFilter>;
  readonly extension?: Maybe<StringFilter>;
  readonly mimeType?: Maybe<StringFilter>;
  readonly size?: Maybe<FloatFilter>;
  readonly assetId?: Maybe<StringFilter>;
  readonly path?: Maybe<StringFilter>;
  readonly url?: Maybe<StringFilter>;
  readonly source?: Maybe<SanityAssetSourceDataFilter>;
};

export type SanityFileAssetSorting = {
  readonly _id?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly _createdAt?: Maybe<SortOrder>;
  readonly _updatedAt?: Maybe<SortOrder>;
  readonly _rev?: Maybe<SortOrder>;
  readonly _key?: Maybe<SortOrder>;
  readonly originalFilename?: Maybe<SortOrder>;
  readonly label?: Maybe<SortOrder>;
  readonly title?: Maybe<SortOrder>;
  readonly description?: Maybe<SortOrder>;
  readonly altText?: Maybe<SortOrder>;
  readonly sha1hash?: Maybe<SortOrder>;
  readonly extension?: Maybe<SortOrder>;
  readonly mimeType?: Maybe<SortOrder>;
  readonly size?: Maybe<SortOrder>;
  readonly assetId?: Maybe<SortOrder>;
  readonly path?: Maybe<SortOrder>;
  readonly url?: Maybe<SortOrder>;
  readonly source?: Maybe<SanityAssetSourceDataSorting>;
};

export type SanityImageAssetFilter = {
  /** Apply filters on document level */
  readonly _?: Maybe<Sanity_DocumentFilter>;
  readonly _id?: Maybe<IdFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly _createdAt?: Maybe<DatetimeFilter>;
  readonly _updatedAt?: Maybe<DatetimeFilter>;
  readonly _rev?: Maybe<StringFilter>;
  readonly _key?: Maybe<StringFilter>;
  readonly originalFilename?: Maybe<StringFilter>;
  readonly label?: Maybe<StringFilter>;
  readonly title?: Maybe<StringFilter>;
  readonly description?: Maybe<StringFilter>;
  readonly altText?: Maybe<StringFilter>;
  readonly sha1hash?: Maybe<StringFilter>;
  readonly extension?: Maybe<StringFilter>;
  readonly mimeType?: Maybe<StringFilter>;
  readonly size?: Maybe<FloatFilter>;
  readonly assetId?: Maybe<StringFilter>;
  readonly path?: Maybe<StringFilter>;
  readonly url?: Maybe<StringFilter>;
  readonly metadata?: Maybe<SanityImageMetadataFilter>;
  readonly source?: Maybe<SanityAssetSourceDataFilter>;
};

export type SanityImageAssetSorting = {
  readonly _id?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly _createdAt?: Maybe<SortOrder>;
  readonly _updatedAt?: Maybe<SortOrder>;
  readonly _rev?: Maybe<SortOrder>;
  readonly _key?: Maybe<SortOrder>;
  readonly originalFilename?: Maybe<SortOrder>;
  readonly label?: Maybe<SortOrder>;
  readonly title?: Maybe<SortOrder>;
  readonly description?: Maybe<SortOrder>;
  readonly altText?: Maybe<SortOrder>;
  readonly sha1hash?: Maybe<SortOrder>;
  readonly extension?: Maybe<SortOrder>;
  readonly mimeType?: Maybe<SortOrder>;
  readonly size?: Maybe<SortOrder>;
  readonly assetId?: Maybe<SortOrder>;
  readonly path?: Maybe<SortOrder>;
  readonly url?: Maybe<SortOrder>;
  readonly metadata?: Maybe<SanityImageMetadataSorting>;
  readonly source?: Maybe<SanityAssetSourceDataSorting>;
};

export type SanityImageCropFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly top?: Maybe<FloatFilter>;
  readonly bottom?: Maybe<FloatFilter>;
  readonly left?: Maybe<FloatFilter>;
  readonly right?: Maybe<FloatFilter>;
};

export type SanityImageCropSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly top?: Maybe<SortOrder>;
  readonly bottom?: Maybe<SortOrder>;
  readonly left?: Maybe<SortOrder>;
  readonly right?: Maybe<SortOrder>;
};

export type SanityImageDimensionsFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly height?: Maybe<FloatFilter>;
  readonly width?: Maybe<FloatFilter>;
  readonly aspectRatio?: Maybe<FloatFilter>;
};

export type SanityImageDimensionsSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly height?: Maybe<SortOrder>;
  readonly width?: Maybe<SortOrder>;
  readonly aspectRatio?: Maybe<SortOrder>;
};

export type SanityImageHotspotFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly x?: Maybe<FloatFilter>;
  readonly y?: Maybe<FloatFilter>;
  readonly height?: Maybe<FloatFilter>;
  readonly width?: Maybe<FloatFilter>;
};

export type SanityImageHotspotSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly x?: Maybe<SortOrder>;
  readonly y?: Maybe<SortOrder>;
  readonly height?: Maybe<SortOrder>;
  readonly width?: Maybe<SortOrder>;
};

export type SanityImageMetadataFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly location?: Maybe<GeopointFilter>;
  readonly dimensions?: Maybe<SanityImageDimensionsFilter>;
  readonly palette?: Maybe<SanityImagePaletteFilter>;
  readonly lqip?: Maybe<StringFilter>;
  readonly hasAlpha?: Maybe<BooleanFilter>;
  readonly isOpaque?: Maybe<BooleanFilter>;
};

export type SanityImageMetadataSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly location?: Maybe<GeopointSorting>;
  readonly dimensions?: Maybe<SanityImageDimensionsSorting>;
  readonly palette?: Maybe<SanityImagePaletteSorting>;
  readonly lqip?: Maybe<SortOrder>;
  readonly hasAlpha?: Maybe<SortOrder>;
  readonly isOpaque?: Maybe<SortOrder>;
};

export type SanityImagePaletteFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly darkMuted?: Maybe<SanityImagePaletteSwatchFilter>;
  readonly lightVibrant?: Maybe<SanityImagePaletteSwatchFilter>;
  readonly darkVibrant?: Maybe<SanityImagePaletteSwatchFilter>;
  readonly vibrant?: Maybe<SanityImagePaletteSwatchFilter>;
  readonly dominant?: Maybe<SanityImagePaletteSwatchFilter>;
  readonly lightMuted?: Maybe<SanityImagePaletteSwatchFilter>;
  readonly muted?: Maybe<SanityImagePaletteSwatchFilter>;
};

export type SanityImagePaletteSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly darkMuted?: Maybe<SanityImagePaletteSwatchSorting>;
  readonly lightVibrant?: Maybe<SanityImagePaletteSwatchSorting>;
  readonly darkVibrant?: Maybe<SanityImagePaletteSwatchSorting>;
  readonly vibrant?: Maybe<SanityImagePaletteSwatchSorting>;
  readonly dominant?: Maybe<SanityImagePaletteSwatchSorting>;
  readonly lightMuted?: Maybe<SanityImagePaletteSwatchSorting>;
  readonly muted?: Maybe<SanityImagePaletteSwatchSorting>;
};

export type SanityImagePaletteSwatchFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly background?: Maybe<StringFilter>;
  readonly foreground?: Maybe<StringFilter>;
  readonly population?: Maybe<FloatFilter>;
  readonly title?: Maybe<StringFilter>;
};

export type SanityImagePaletteSwatchSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly background?: Maybe<SortOrder>;
  readonly foreground?: Maybe<SortOrder>;
  readonly population?: Maybe<SortOrder>;
  readonly title?: Maybe<SortOrder>;
};

export type Sanity_DocumentFilter = {
  /** All documents referencing the given document ID. */
  readonly references?: Maybe<Scalars['ID']>;
  /** All documents that are drafts. */
  readonly is_draft?: Maybe<Scalars['Boolean']>;
};

export type SlugFilter = {
  readonly _key?: Maybe<StringFilter>;
  readonly _type?: Maybe<StringFilter>;
  readonly current?: Maybe<StringFilter>;
};

export type SlugSorting = {
  readonly _key?: Maybe<SortOrder>;
  readonly _type?: Maybe<SortOrder>;
  readonly current?: Maybe<SortOrder>;
};

export type SortOrder =
  /** Sorts on the value in ascending order. */
  | 'ASC'
  /** Sorts on the value in descending order. */
  | 'DESC';

export type StringFilter = {
  /** Checks if the value is equal to the given input. */
  readonly eq?: Maybe<Scalars['String']>;
  /** Checks if the value is not equal to the given input. */
  readonly neq?: Maybe<Scalars['String']>;
  /** Checks if the value matches the given word/words. */
  readonly matches?: Maybe<Scalars['String']>;
  readonly in?: Maybe<ReadonlyArray<Scalars['String']>>;
  readonly nin?: Maybe<ReadonlyArray<Scalars['String']>>;
};
